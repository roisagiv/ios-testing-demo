//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 9/22/15
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Always Search User Paths
// 
// If enabled both #include <header.h>-style and #include "header.h"-style directives
// will search the paths in "User Header Search Paths" before "Header Search Paths", with
// the consequence that user headers (such as your own String.h header) would have
// precedence over system headers when using #include <header.h>. This is done using the
// -iquote flag for the paths provided in "User Header Search Paths". If disabled and
// your compiler fully supports separate user paths, user headers will only be accessible
// with #include "header.h"-style preprocessor directives.
// 
// For backwards compatibility reasons, this setting is enabled by default, but disabling
// it is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO


// C++ Language Dialect
// 
// Choose a standard or non-standard C++ language dialect.
// 
// C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]
// 
// GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]
// 
// C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions.
// [-std=c++11]
// 
// GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
// [-std=gnu++11]
// 
// C++14: Accept the ISO C++ 2014 standard with amendments, but not GNU extensions.
// [-std=c++14]
// 
// GNU++14: Accept the ISO C++ 2014 standard with amendments and GNU extensions.
// [-std=gnu++14]
// 
// Compiler Default: Tells the compiler to use its default C++ language dialect. This is
// normally the best choice unless you have specific needs. (Currently equivalent to
// GNU++98.)

CLANG_CXX_LANGUAGE_STANDARD = gnu++0x


// C++ Standard Library
// 
// Choose a version of the C++ standard library to use.
// 
// libstdc++: traditional C++ standard library that works with GCC and the LLVM Compiler
// (default).
// libc++: highly optimized C++ standard library that works only with the LLVM Compiler,
// and is designed to support new C++11 features.

CLANG_CXX_LIBRARY = libc++


// Enable Modules (C and Objective-C)
// 
// Enables the use of modules for system APIs.  System headers are imported as semantic
// modules instead of raw headers.  This can result in faster builds and project
// indexing.  [-fmodules]

CLANG_ENABLE_MODULES = YES


// Objective-C Automatic Reference Counting
// 
// Compiles reference-counted Objective-C code (when garbage collection is not enabled)
// to use Automatic Reference Counting.
// Code compiled using automated reference counting is compatible with other code (e.g.,
// frameworks) compiled using either
// manual reference counting (i.e., traditional "retain" and "release" messages) or
// automated reference counting.  Using this mode is currently
// incompatible with compiling code to use Objective-C Garbage Collection. [-fobjc-arc]

CLANG_ENABLE_OBJC_ARC = YES


// Duplicate Method Definitions
// 
// Warn about declaring the same method more than once within the same @interface.

CLANG_WARN__DUPLICATE_METHOD_MATCH = YES


// Implicit Boolean Conversions
// 
// Warn about implicit conversions to boolean values that are suspicious.  For example,
// writing 'if (foo)' with 'foo' being the name a function will trigger a warning.
// [-Wbool-conversion]

CLANG_WARN_BOOL_CONVERSION = YES


// Implicit Constant Conversions
// 
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.
// [-Wconstant-conversion]

CLANG_WARN_CONSTANT_CONVERSION = YES


// Direct usage of 'isa'
// 
// Warn about direct accesses to the Objective-C 'isa' pointer instead of using a runtime
// API. [-Wdeprecated-objc-isa-usage]

CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR


// Empty Loop Bodies
// 
// Warn about loop bodies that are suspiciously empty.   [-Wempty-body]

CLANG_WARN_EMPTY_BODY = YES


// Implicit Enum Conversions
// 
// Warn about implicit conversions between different kinds of enum values.  For example,
// this can catch issues when using the wrong enum flag as an argument to a function or
// method.  [-Wenum-conversion]

CLANG_WARN_ENUM_CONVERSION = YES


// Implicit Integer to Pointer Conversions
// 
// Warn about implicit conversions between pointers and integers.  For example, this can
// catch issues when one incorrectly intermixes using NSNumber*'s and raw integers.
// [-Wint-conversion]

CLANG_WARN_INT_CONVERSION = YES


// Unintentional Root Class
// 
// Warn about classes that unintentionally do not subclass a root class (such as
// NSObject).  [-Wobjc-root-class]

CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR


// Unreachable Code
// 
// Warns about potentially unreachable code.  [-Wunreachable-code]

CLANG_WARN_UNREACHABLE_CODE = YES


// Code Signing Identity
// 
// The name ("common name") of a valid code-signing certificate in a keychain within your
// keychain path.   A missing or invalid certificate will cause a build error.

CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Developer


// Strip Debug Symbols During Copy
// 
// Activating this setting causes binary files which are copied during the build (e.g.,
// in a Copy Bundle Resources or Copy Files build phase) to be stripped of debugging
// symbols.  It does not cause the linked product of a target to be stripped (use Strip
// Linked Product for that).

COPY_PHASE_STRIP = NO


// Enable Strict Checking of objc_msgSend Calls
// 
// Controls whether objc_msgSend calls must be cast to the appropriate function pointer
// type before being called.

ENABLE_STRICT_OBJC_MSGSEND = YES


// C Language Dialect
// 
// Choose a standard or non-standard C language dialect.
// 
// ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are incompatible.
// [-ansi]
// 
// Incompatible GNU extensions include the 'asm', 'inline', and 'typeof' keywords (but
// not the equivalent __asm__, __inline__, and __typeof__ forms), and the '//' syntax for
// comments.
// 
// This setting also enables trigraphs.
// 
// C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// 
// GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// 
// C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// 
// GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// 
// C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// 
// GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// 
// Compiler Default: Tells the compiler to use its default C language dialect. This is
// normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)
// 
// Please see the full GCC manual for the full definition of all these settings on the C
// dialect:
// 
// <http://developer.apple.com/documentation/DeveloperTools/gcc-4.2.1/gcc/C-Dialect-Options.html>

GCC_C_LANGUAGE_STANDARD = gnu99


// No Common Blocks
// 
// In C, allocate even uninitialized global variables in the data section of the object
// file, rather than generating them as common blocks.  This has the effect that if the
// same variable is declared (without extern ) in two different compilations, you will
// get an error when you link them. [-fno-common]

GCC_NO_COMMON_BLOCKS = YES


// Implicit Conversion to 32 Bit Type
// 
// Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.  This is
// a subset
// of the warnings provided by -Wconversion.  [-Wshorten-64-to-32]

GCC_WARN_64_TO_32_BIT_CONVERSION = YES


// Mismatched Return Type
// 
// Causes warnings to be emitted when a function with a defined return type (not void)
// contains a return statement without a return-value.  Also emits a warning when a
// function is defined without specifying a return type.  [-Wreturn-type]

GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR


// Undeclared Selector
// 
// Warn if a "@selector(...)" expression referring to an undeclared selector is found.  A
// selector is considered undeclared if no method with that name has been declared before
// the "@selector(...)" expression, either explicitly in an @interface or @protocol
// declaration, or implicitly in an @implementation section.  This option always performs
// its checks as soon as a "@selector(...)" expression is found, while -Wselector only
// performs its checks in the final stage of compilation.  This also enforces the coding
// style convention that methods and selectors must be declared before being used.
// [-Wundeclared-selector]

GCC_WARN_UNDECLARED_SELECTOR = YES


// Uninitialized Variables
// 
// Warn if a variable might be clobbered by a setjmp call or if an automatic variable is
// used without prior initialization.
// 
// Note that the compiler may not detect all cases where an automatic variable is
// initialized or all usage patterns that may lead to use prior to initialization.  You
// can toggle between the normal uninitialized value checking or the more aggressive
// (conservative) checking which finds more issues but the checking is much stricter.
// [-Wuninitialized,-Wconditional-uninitialized]

GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE


// Unused Functions
// 
// Warn whenever a static function is declared but not defined or a non-inline static
// function is unused.  [-Wunused-function]

GCC_WARN_UNUSED_FUNCTION = YES


// Unused Variables
// 
// Warn whenever a local variable or non-constant static variable is unused aside from
// its declaration.  [-Wunused-variable]

GCC_WARN_UNUSED_VARIABLE = YES


// iOS Deployment Target
// 
// Code will load on this and later versions of iOS.  Framework APIs that are unavailable
// in earlier versions will be weak-linked; your code should check for null function
// pointers or specific system versions before calling newer APIs.
// 
// iOS 4.3 - Code will not load on systems earlier than 4.3. [4.3]
// iOS 5.0 - Code will not load on systems earlier than 5.0. [5.0]
// iOS 5.1 - Code will not load on systems earlier than 5.1. [5.1]
// iOS 6.0 - Code will not load on systems earlier than 6.0. [6.0]
// iOS 6.1 - Code will not load on systems earlier than 6.1. [6.1]
// iOS 7.0 - Code will not load on systems earlier than 7.0. [7.0]
// iOS 7.1 - Code will not load on systems earlier than 7.1. [7.1]
// iOS 8.0 - Code will not load on systems earlier than 8.0. [8.0]
// iOS 8.1 - Code will not load on systems earlier than 8.1. [8.1]
// iOS 8.2 - Code will not load on systems earlier than 8.2. [8.2]
// iOS 8.4 - Code will not load on systems earlier than 8.4. [8.4]

IPHONEOS_DEPLOYMENT_TARGET = 9.0


// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the ADDITIONAL_SDKS
// setting.

SDKROOT = iphoneos